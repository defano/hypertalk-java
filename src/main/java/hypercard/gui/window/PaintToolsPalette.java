package hypercard.gui.window;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import hypercard.gui.HyperCardWindow;
import hypercard.paint.PaintToolSelectionObserver;
import hypercard.context.ToolsContext;
import hypercard.paint.tools.AbstractPaintTool;
import hypercard.paint.tools.PaintToolType;

import javax.swing.*;
import java.awt.*;

public class PaintToolsPalette extends HyperCardWindow implements PaintToolSelectionObserver {
    private JPanel palettePanel;

    private JButton selection;
    private JButton lasso;
    private JButton pencil;
    private JButton paintbrush;
    private JButton eraser;
    private JButton line;
    private JButton spraypaint;
    private JButton rectangle;
    private JButton roundRectangle;
    private JButton fill;
    private JButton oval;
    private JButton text;
    private JButton curve;
    private JButton polygon;
    private JButton shape;
    private JButton finger;
    private JButton button;
    private JButton field;

    private JButton[] allTools;

    public PaintToolsPalette() {
         allTools = new JButton[]{selection, lasso, pencil, paintbrush, eraser, line, spraypaint, rectangle, roundRectangle, fill, oval, text, curve, polygon, shape, finger, button, field};

        finger.addActionListener(e -> toolSelected(PaintToolType.ARROW));
        pencil.addActionListener(e -> toolSelected(PaintToolType.PENCIL));
        paintbrush.addActionListener(e -> toolSelected(PaintToolType.PAINTBRUSH));
        eraser.addActionListener(e -> toolSelected(PaintToolType.ERASER));
        line.addActionListener(e -> toolSelected(PaintToolType.LINE));
        rectangle.addActionListener(e -> toolSelected(PaintToolType.RECTANGLE));
        roundRectangle.addActionListener(e -> toolSelected(PaintToolType.ROUND_RECTANGLE));
        polygon.addActionListener(e -> toolSelected(PaintToolType.POLYGON));
        selection.addActionListener(e -> toolSelected(PaintToolType.SELECTION));
        oval.addActionListener(e -> toolSelected(PaintToolType.OVAL));
        shape.addActionListener(e -> toolSelected(PaintToolType.SHAPE));
        text.addActionListener(e -> toolSelected(PaintToolType.TEXT));

        ToolsContext.getInstance().addObserver(this);
        onPaintToolSelected(null, ToolsContext.getInstance().getSelectedTool());
    }

    @Override
    public JPanel getWindowPanel() {
        return palettePanel;
    }

    @Override
    public void bindModel(Object data) {
        // Nothing to do
    }

    @Override
    public void onPaintToolSelected(AbstractPaintTool oldTool, AbstractPaintTool newTool) {
        for (JButton thisToolButton : allTools) {
            if (thisToolButton != null) {
                thisToolButton.setEnabled(true);
            }
        }

        getButtonForTool(newTool.getToolType()).setEnabled(false);
    }

    private void toolSelected(PaintToolType toolType) {
        ToolsContext.getInstance().setSelectedToolType(toolType);
        onPaintToolSelected(null, ToolsContext.getInstance().getSelectedTool());
    }

    private JButton getButtonForTool(PaintToolType paintToolType) {
        switch (paintToolType) {
            case ERASER:
                return eraser;
            case ARROW:
                return finger;
            case PENCIL:
                return pencil;
            case PAINTBRUSH:
                return paintbrush;
            case LINE:
                return line;
            case RECTANGLE:
                return rectangle;
            case ROUND_RECTANGLE:
                return roundRectangle;
            case OVAL:
                return oval;
            case POLYGON:
                return polygon;
            case SELECTION:
                return selection;
            case SHAPE:
                return shape;
            case TEXT:
                return text;

            default:
                throw new IllegalStateException("Bug! Unimplemented tool type " + paintToolType);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        palettePanel = new JPanel();
        palettePanel.setLayout(new GridLayoutManager(6, 3, new Insets(0, 0, 0, 0), -1, -1));
        selection = new JButton();
        selection.setEnabled(true);
        selection.setOpaque(true);
        selection.setSelected(false);
        selection.setText("Selection");
        selection.setVisible(true);
        palettePanel.add(selection, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lasso = new JButton();
        lasso.setText("Lasso");
        palettePanel.add(lasso, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pencil = new JButton();
        pencil.setContentAreaFilled(false);
        pencil.setText("Pencil");
        palettePanel.add(pencil, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        paintbrush = new JButton();
        paintbrush.setContentAreaFilled(false);
        paintbrush.setText("Paintbrush");
        palettePanel.add(paintbrush, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eraser = new JButton();
        eraser.setContentAreaFilled(false);
        eraser.setText("Eraser");
        palettePanel.add(eraser, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        line = new JButton();
        line.setContentAreaFilled(false);
        line.setText("Line");
        palettePanel.add(line, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spraypaint = new JButton();
        spraypaint.setContentAreaFilled(false);
        spraypaint.setText("Spray Paint");
        palettePanel.add(spraypaint, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rectangle = new JButton();
        rectangle.setContentAreaFilled(false);
        rectangle.setText("Rectangle");
        palettePanel.add(rectangle, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roundRectangle = new JButton();
        roundRectangle.setContentAreaFilled(false);
        roundRectangle.setText("Rounded Rectangle");
        palettePanel.add(roundRectangle, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fill = new JButton();
        fill.setContentAreaFilled(false);
        fill.setText("Fill");
        palettePanel.add(fill, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        oval = new JButton();
        oval.setContentAreaFilled(false);
        oval.setText("Oval");
        palettePanel.add(oval, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        curve = new JButton();
        curve.setContentAreaFilled(false);
        curve.setText("Curve");
        palettePanel.add(curve, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        text = new JButton();
        text.setContentAreaFilled(false);
        text.setText("Text");
        palettePanel.add(text, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        shape = new JButton();
        shape.setContentAreaFilled(false);
        shape.setText("Shape");
        palettePanel.add(shape, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        polygon = new JButton();
        polygon.setContentAreaFilled(false);
        polygon.setText("Polygon");
        palettePanel.add(polygon, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        finger = new JButton();
        finger.setLabel("Finger");
        finger.setText("Finger");
        palettePanel.add(finger, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button = new JButton();
        button.setText("Button");
        palettePanel.add(button, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        field = new JButton();
        field.setLabel("Field");
        field.setText("Field");
        palettePanel.add(field, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return palettePanel;
    }
}
