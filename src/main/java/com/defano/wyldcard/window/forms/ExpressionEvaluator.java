package com.defano.wyldcard.window.forms;

import com.defano.hypertalk.exception.HtException;
import com.defano.wyldcard.WyldCard;
import com.defano.wyldcard.runtime.context.ExecutionContext;
import com.defano.wyldcard.runtime.interpreter.MessageEvaluationObserver;
import com.defano.wyldcard.window.HyperCardFrame;
import com.defano.wyldcard.window.MessageBoxTextField;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class ExpressionEvaluator extends HyperCardFrame implements MessageEvaluationObserver {
    private MessageBoxTextField expressionField;
    private JButton evaluateButton;
    private JTextField resultField;
    private JPanel windowPanel;
    private JLabel contextField;

    private ExecutionContext context;

    public ExpressionEvaluator() {
        expressionField.setMessageEvaluationObserver(this);
        evaluateButton.addActionListener(a -> expressionField.evaluate());
    }

    @Override
    public JComponent getWindowPanel() {
        return windowPanel;
    }

    @Override
    public void bindModel(Object data) {
        // Nothing to do
    }

    @Override
    public void onMessageEvaluated(String result) {
        SwingUtilities.invokeLater(() -> resultField.setText(result));
    }

    @Override
    public void onEvaluationError(HtException exception) {
        WyldCard.getInstance().showErrorDialog(exception);
    }

    public ExecutionContext getContext() {
        return context;
    }

    public void setContext(ExecutionContext context) {
        this.context = context;

        expressionField.setStaticContext(context);
        contextField.setText(context.getMessage());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        windowPanel = new JPanel();
        windowPanel.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        expressionField = new MessageBoxTextField();
        windowPanel.add(expressionField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        evaluateButton = new JButton();
        evaluateButton.setText("Evaluate");
        windowPanel.add(evaluateButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resultField = new JTextField();
        resultField.setEditable(true);
        resultField.setEnabled(false);
        windowPanel.add(resultField, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 60), null, 0, false));
        contextField = new JLabel();
        contextField.setEnabled(false);
        contextField.setText("Context");
        windowPanel.add(contextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return windowPanel;
    }
}
