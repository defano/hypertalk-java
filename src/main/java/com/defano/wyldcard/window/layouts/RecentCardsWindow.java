package com.defano.wyldcard.window.layouts;

import com.defano.hypertalk.ast.model.Destination;
import com.defano.jmonet.transform.image.ScaleTransform;
import com.defano.wyldcard.WyldCard;
import com.defano.wyldcard.parts.card.CardPart;
import com.defano.wyldcard.parts.stack.StackPart;
import com.defano.wyldcard.runtime.context.ExecutionContext;
import com.defano.wyldcard.util.WrapLayout;
import com.defano.wyldcard.window.WyldCardDialog;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Set;

public class RecentCardsWindow extends WyldCardDialog<Object> {

    private JPanel windowPanel;
    private JPanel thumbnailsPanel;
    private JScrollPane scrollPane;

    public RecentCardsWindow() {

        // Add call cards currently on the backstack
        Set<Destination> recentCards = WyldCard.getInstance().getNavigationManager().getRecentCards();

        // Add currently visible cards on all open stacks (which may not yet appear in the backstack)
        for (StackPart thisOpenStack : WyldCard.getInstance().getStackManager().getOpenStacks()) {
            recentCards.add(new Destination(
                    thisOpenStack.getStackModel(),
                    thisOpenStack.getDisplayedCard().getId(new ExecutionContext())
            ));
        }

        // Which card currently has focus? (We'll focus the associated button)
        Destination focusedCard = new Destination(
                WyldCard.getInstance().getStackManager().getFocusedStack().getStackModel(),
                WyldCard.getInstance().getStackManager().getFocusedCard().getId(new ExecutionContext())
        );

        // Generate thumbnails for each card
        for (Destination thisCard : recentCards) {
            addDestinationThumbnail(thisCard, thisCard.equals(focusedCard));
        }
    }

    @Override
    public JComponent getWindowPanel() {

        thumbnailsPanel.setLayout(new WrapLayout());
        ((WrapLayout) thumbnailsPanel.getLayout()).setHgap(2);
        ((WrapLayout) thumbnailsPanel.getLayout()).setVgap(2);

        return windowPanel;
    }

    @Override
    public void bindModel(Object ignored) {
        // Nothing to do
    }

    private void addDestinationThumbnail(Destination destination, boolean focused) {
        StackPart stack = WyldCard.getInstance().getStackManager().getOpenStack(destination.getStack());
        Integer cardNumber = stack.getStackModel().getIndexOfCardId(destination.getCardIndex());

        // Null means card doesn't exist (likely deleted)
        if (cardNumber != null) {
            CardPart loadedCard = stack.loadCard(new ExecutionContext(), cardNumber);

            SwingUtilities.invokeLater(() -> {
                int cardWidth = loadedCard.getWidth();
                int cardHeight = loadedCard.getHeight();

                BufferedImage image = loadedCard.getScreenshot();
                image = new ScaleTransform(new Dimension((int) (cardWidth * .1), (int) (cardHeight * .1))).apply(image);

                ImageIcon icon = new ImageIcon(image);
                JButton button = new JButton();
                button.addActionListener(e -> {
                    WyldCard.getInstance().getNavigationManager().goCard(new ExecutionContext(), stack, cardNumber, true);
                    stack.getOwningStackWindow().requestFocus();
                    RecentCardsWindow.this.dispose();
                });
                button.setIcon(icon);

                thumbnailsPanel.add(button);

                if (focused) {
                    button.requestFocus();
                }

                loadedCard.dispose();
            });
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        windowPanel = new JPanel();
        windowPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        windowPanel.setMinimumSize(new Dimension(300, 250));
        scrollPane = new JScrollPane();
        windowPanel.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        thumbnailsPanel = new JPanel();
        thumbnailsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane.setViewportView(thumbnailsPanel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return windowPanel;
    }

}
