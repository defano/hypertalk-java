/*
 * StackWindow
 * hypertalk-java
 *
 * Created by Matt DeFano on 2/19/17 3:10 PM.
 * Copyright Â© 2017 Matt DeFano. All rights reserved.
 */

package com.defano.hypercard.gui.window;

import com.defano.hypercard.gui.HyperCardWindow;
import com.defano.hypercard.parts.CardPart;
import com.defano.hypercard.parts.StackPart;
import com.defano.hypercard.parts.model.StackObserver;

import javax.swing.*;
import java.awt.*;

public class StackWindow extends HyperCardWindow implements StackObserver {

    private StackPart stack;
    private CardPart card;
    private JPanel cardPanel;

    public CardPart getDisplayedCard() {
        return card;
    }

    private void displayCard(CardPart card) {
        this.card = card;

        cardPanel.removeAll();
        cardPanel.add(card);
        cardPanel.setPreferredSize(card.getSize());
        cardPanel.revalidate();
        cardPanel.repaint();
    }

    public void invalidateWindowTitle() {
        String stackName = card.getStackModel().getStackName();
        int cardNumber = card.getCardIndexInStack() + 1;
        int cardCount = stack.getCardCountProvider().get();
        boolean isEditingBackground = !card.isForegroundVisible();

        if (isEditingBackground) {
            getWindowFrame().setTitle(stackName + " - Card " + cardNumber + " of " + cardCount + " (Background)");
        } else {
            getWindowFrame().setTitle(stackName + " - Card " + cardNumber + " of " + cardCount);
        }
    }

    @Override
    public JPanel getWindowPanel() {
        return cardPanel;
    }

    @Override
    public void bindModel(Object data) {
        if (data instanceof StackPart) {
            this.stack = (StackPart) data;
            this.card = this.stack.getCurrentCard();

            this.getWindowPanel().setPreferredSize(this.stack.getStackModel().getSize());
            this.stack.addObserver(this);
        } else {
            throw new RuntimeException("Bug! Don't know how to bind data class to window." + data);
        }
    }

    @Override
    public void onStackOpened(StackPart newStack) {
        this.stack = newStack;
        this.card = this.stack.getCurrentCard();
        cardPanel.setPreferredSize(this.stack.getStackModel().getSize());

        displayCard(this.stack.getCurrentCard());
        invalidateWindowTitle();
    }

    @Override
    public void onCardClosed(CardPart oldCard) {
        // Nothing to do
    }

    @Override
    public void onCardOpened(CardPart newCard) {
        displayCard(newCard);
        invalidateWindowTitle();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        cardPanel = new JPanel();
        cardPanel.setLayout(new BorderLayout(0, 0));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return cardPanel;
    }
}
