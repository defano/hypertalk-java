package com.defano.hypercard.gui.window;

import com.defano.hypercard.gui.HyperCardDialog;
import com.defano.hypercard.gui.icons.ButtonIcon;
import com.defano.hypercard.gui.icons.IconFactory;
import com.defano.hypercard.parts.button.ButtonModel;
import com.defano.hypertalk.ast.common.Value;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;


public class IconPicker extends HyperCardDialog {

    private JButton okButton;
    private JPanel windowPanel;
    private JPanel iconPanel;
    private JButton noneButton;
    private List<JButton> buttons;
    private ButtonModel model;
    private int selectedIconId;

    public IconPicker() {

        okButton.addActionListener(e -> {
            model.setKnownProperty(ButtonModel.PROP_ICON, new Value(selectedIconId));
            dispose();
        });

        noneButton.addActionListener(e -> {
            model.setKnownProperty(ButtonModel.PROP_ICON, new Value());
            dispose();
        });

        buttons = getButtons();

        for (JButton thisButt : buttons) {
            iconPanel.add(thisButt);
        }

        iconPanel.setPreferredSize(new Dimension(iconPanel.getWidth(), (100 / 5) * 100 + 2 * ((FlowLayout) iconPanel.getLayout()).getVgap()));
        invalidate();
    }

    private List<JButton> getButtons() {
        List<JButton> buttons = new ArrayList<>();

        for (ButtonIcon thisIcon : IconFactory.getAllIcons()) {
            JButton thisButt = new JButton();
            thisButt.setPreferredSize(new Dimension(100, 100));
            thisButt.setIcon(thisIcon.getIcon());
            thisButt.setFocusable(false);
            thisButt.addActionListener(e -> {
                enableButtons();
                ((JButton) e.getSource()).setEnabled(false);
                selectedIconId = thisIcon.getId();
            });
            buttons.add(thisButt);
        }

        return buttons;
    }

    private void enableButtons() {
        for (JButton thisButton : buttons) {
            thisButton.setEnabled(true);
        }
    }

    @Override
    public JComponent getWindowPanel() {
        return windowPanel;
    }

    @Override
    public void bindModel(Object data) {
        this.model = (ButtonModel) data;
        selectedIconId = this.model.getKnownProperty(ButtonModel.PROP_ICON).integerValue();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        windowPanel = new JPanel();
        windowPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 10, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setVerticalScrollBarPolicy(22);
        windowPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(550, 400), null, 0, false));
        iconPanel = new JPanel();
        iconPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 2, 2));
        iconPanel.setFocusable(false);
        iconPanel.setPreferredSize(new Dimension(400, -1));
        scrollPane1.setViewportView(iconPanel);
        okButton = new JButton();
        okButton.setText("OK");
        windowPanel.add(okButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        noneButton = new JButton();
        noneButton.setText("None");
        windowPanel.add(noneButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        windowPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return windowPanel;
    }
}
